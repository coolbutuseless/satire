% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/solver-naive.R
\name{sat_solve_naive}
\alias{sat_solve_naive}
\title{Naive, brute-force SAT solver with up-front memory allocation}
\usage{
sat_solve_naive(
  sat,
  remove_dummy = TRUE,
  remove_dupes = TRUE,
  mem_limit = 1024,
  verbosity = 0L
)
}
\arguments{
\item{sat}{SAT problem as created by \code{\link{sat_new}()}}

\item{remove_dummy}{Remove dummy variables from result. Default: TRUE. Dummy 
variables are used in many places (e.g. cardinality constraints). These 
variables are not part of the user's problem statement, and most 
of the time should not be present in the solution.  A variable is
considered a dummy variable if it starts with the word "dummy".}

\item{remove_dupes}{Remove duplicate solutions? Default: TRUE}

\item{mem_limit}{only run problems if the estimated memory allocation is
less than this number of MB.  Default: 1024.  This is a guard 
to prevent catastrophic consequences of trying to allocate too much
memory if given a large problem.}

\item{verbosity}{verbosity level.  Default: 0}
}
\value{
data.frame of logical values. Columns correspond to the variable 
        names within the problem.  Each row defines a solution. If problem
        is unsatisfiable, return NULL.
}
\description{
This solver is only suitable for small problems as memory use is exponential in 
the number of variables and all memory is pre-allocated. E.g. a problem with
21 variables will pre-allocate about a gigabyte of memory.  Each extra
variable doubles the memory required - e.g. a problem with 32 variables 
would require allocation of 520 GB of memory.
}
\examples{
sat <- sat_new()
sat_card_atmost_k(sat, letters[1:4], 3)
sat$exprs
sat$names
sat_solve_naive(sat)
}
\seealso{
Other SAT solvers: 
\code{\link{sat_solve_dpll}()}
}
\concept{SAT solvers}

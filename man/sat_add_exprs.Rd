% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sat-core.R
\name{sat_add_exprs}
\alias{sat_add_exprs}
\title{Add Boolean expressions to a SAT problem}
\usage{
sat_add_exprs(sat, exprs, verbosity = 0L)
}
\arguments{
\item{sat}{\code{sat} object as created by \code{\link{sat_new}()}}

\item{exprs}{a character vector of Boolean expressions - liberal use brackets
is encouraged to signify intent. If any expression is not 
in CNF, an attempt will be made to convert it to CNF using Tseytin
transformation. 
Allowed syntax:
\describe{
  \item{\code{!}}{Negation}
  \item{\code{|}}{OR}
  \item{\code{&}}{AND}
  \item{\code{->}}{Implication. \code{a -> b} will be rewritten as \code{!a | b}}
  \item{\code{==}}{Equivalence. \code{a == b} will be rewritten as 
        \code{(a -> b) & (b -> a)}}
  \item{\code{!!}}{Double negation. \code{!!a} will be simplified to \code{a}}
  \item{alpha-numeric names}{names must only contain a-z, A-Z, 0-9 and underscore}
}}

\item{verbosity}{Verbosity level. Default: 0}
}
\value{
None
}
\description{
Note: Adding clauses to a SAT problem can only be via adding integer literals
(via \code{sat_add_literals()}) or adding named expressions (via 
\code{sat_add_exprs()}) .  The two 
methods cannot be mixed within a single SAT problem.
}
\examples{
# Solve a small SAT problem using strings
sat <- sat_new()
sat_add_exprs(sat, "!a | b")
sat_add_exprs(sat, "!b | c")
sat_add_exprs(sat, "!c | a")
sat_solve_naive(sat)

# Multiple string clauses may be added a single call.
sat <- sat_new()
sat_add_exprs(sat, c("!a | b", "!b | c", "!c | a"))
sat_solve_naive(sat)
}
\seealso{
Other ways of adding clauses: 
\code{\link{sat_add_literals}()}
}
\concept{ways of adding clauses}

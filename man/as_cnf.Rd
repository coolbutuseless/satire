% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cnf-tools.R
\name{as_cnf}
\alias{as_cnf}
\title{Convert an arbitrary Boolean expression to conjunctive normal form (CNF)}
\usage{
as_cnf(expr, dummy_idx = 1L)
}
\arguments{
\item{expr}{Boolean expression}

\item{dummy_idx}{starting index for dummy numbering.  If the supplied expression
is not in CNF, then Tseytin transform may be applied, and this often
generates extra dummy variables.  In order to avoid variable name
clashes it is necessary for the caller to provide a \code{dummy_idx} (unique
within a given SAT problem) to number these dummy variables.}
}
\value{
string containing an expression in CNF
}
\description{
Expression may include nesting with brackets, \code{&}, \code{|}, \code{!},
\code{->} (implication) and \code{==} (equivalence). All other elements in 
the expression must be names. Names must only contain a-z, A-Z, 0-9 and underscore.
}
\examples{
as_cnf("a | b")     # Already CNF. returns the argument unchanged
as_cnf("a -> b")    # Rewrite via substitution
as_cnf("!!a & b")   # Rewrite via substitution
as_cnf("!(a | b)")  # Uses Tseytin transform
}
